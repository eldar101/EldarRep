TestCase subclass: #My3SumSequenceTest	instanceVariableNames: 'a b'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1-test'!!My3SumSequenceTest methodsFor: 'running' stamp: 'ew 4/14/2020 20:44'!test3SumSequence	"basic tests to check the funcitions for a"	self assert: (a valueOf:1) equals: 1 description: 'the start value a is incorrect'.	self assert: (a valueOf:a count) equals: 105 description: 'the end value is incorrect'.	self assert: (a sumOf:0) equals: 0 description: 'error!! index starts at 1'.	self assert: (a sumOf:a count) equals: 230 description: 'incorrect sequence sum'.	"basic tests to check the funcitions for b"	self assert: (b valueOf:1) equals: 2 description: 'start value b is incorrect'.	self assert: (b valueOf:a count) equals: 210 description: 'end value b  is incorrect'.	self assert: (b sumOf:0) equals: 0 description: 'error!! index starts at 1'.	self assert: (b sumOf:b count) equals: 460 description: 'sum all b value is incorrect'.	"basic tests to check the funcitions for errors"	self should: [b valueOf:-1] raise: Error description: 'value b[0] is valid'.		self should: [b valueOf:b count+1] raise: Error description: 'value b[count+1]] is valid'.		self should: [b sumOf:(-1)] raise: Error description: 'sum b[-1] is valid'.		self should: [b sumOf:b count+1] raise: Error description: 'sum b[count+1] is valid'.	! !!My3SumSequenceTest methodsFor: 'setup' stamp: 'ew 4/14/2020 20:38'!setUp   a:= My3SumSequence new.   a initializeWithStart:1 step:3 count:10.   b := My3SumSequence new.   b initializeWithStart:2 step:1 count:10.! !TestCase subclass: #MyArithmeticSequenceTest	instanceVariableNames: 'a b'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1-test'!!MyArithmeticSequenceTest methodsFor: 'running' stamp: 'ew 4/14/2020 19:42'!testArithmeticSequence	"basic tests to check the funcitions for a"	self assert: (a valueOf:1) equals: 1 description: 'the start value a is incorrect'.	self assert: (a valueOf:a count) equals: 19 description: 'the end value is incorrect'.	self assert: (a sumOf:0) equals: 0 description: 'error!! index starts at 1'.	self assert: (a sumOf:a count) equals: 100 description: 'incorrect sequence sum'.	"basic tests to check the funcitions for b"	self assert: (b valueOf:1) equals: 2 description: 'start value b is incorrect'.	self assert: (b valueOf:a count) equals: 2 description: 'end value b  is incorrect'.	self assert: (b sumOf:0) equals: 0 description: 'error!! index starts at 1'.	self assert: (b sumOf:b count) equals: 20 description: 'sum all b value is incorrect'.	"basic tests to check the funcitions for errors"	self should: [b valueOf:-1] raise: Error description: 'value b[0] is valid'.		self should: [b valueOf:b count+1] raise: Error description: 'value b[count+1]] is valid'.		self should: [b sumOf:(-1)] raise: Error description: 'sum b[-1] is valid'.		self should: [b sumOf:b count+1] raise: Error description: 'sum b[count+1] is valid'.	! !!MyArithmeticSequenceTest methodsFor: 'setup' stamp: 'ew 4/14/2020 19:39'!setUp   a:= MyArithmeticSequence new.   a initializeWithStart:1 step:2 count:10.   b := MyArithmeticSequence new.   b initializeWithStart:2 step:0 count:10.! !TestCase subclass: #MyGeometricSequenceTest	instanceVariableNames: 'a b'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1-test'!!MyGeometricSequenceTest methodsFor: 'running' stamp: 'ew 4/14/2020 20:43'!testGeometricSequence	"basic tests to check the funcitions for a"	self assert: (a valueOf:1) equals: 1 description: 'the start value a is incorrect'.	self assert: (a valueOf:a count) equals: 19683 description: 'the end value is incorrect'.	self assert: (a sumOf:0) equals: 0 description: 'error!! index starts at 1'.	self assert: (a sumOf:a count) equals: 29524 description: 'incorrect sequence sum'.	"basic tests to check the funcitions for b"	self assert: (b valueOf:1) equals: 2 description: 'start value b is incorrect'.	self assert: (b valueOf:a count) equals: 2 description: 'end value b  is incorrect'.	self assert: (b sumOf:0) equals: 0 description: 'error!! index starts at 1'.	self assert: (b sumOf:b count) equals: 20 description: 'sum all b value is incorrect'.	"basic tests to check the funcitions for errors"	self should: [b valueOf:-1] raise: Error description: 'value b[0] is valid'.		self should: [b valueOf:b count+1] raise: Error description: 'value b[count+1]] is valid'.		self should: [b sumOf:(-1)] raise: Error description: 'sum b[-1] is valid'.		self should: [b sumOf:b count+1] raise: Error description: 'sum b[count+1] is valid'.	! !!MyGeometricSequenceTest methodsFor: 'setup' stamp: 'ew 4/14/2020 20:39'!setUp   a:= MyGeometricSequence new.   a initializeWithStart:1 step:3 count:10.   b := MyGeometricSequence new.   b initializeWithStart:2 step:1 count:10.! !
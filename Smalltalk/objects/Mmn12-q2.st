Object subclass: #MyPrism	instanceVariableNames: 'base height'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q2'!!MyPrism methodsFor: 'comparing' stamp: 'ew 4/16/2020 00:13'!=aPrism"equals operator"(aPrism isKindOf:  MyPrism )ifFalse: [^self error: 'not a compareable object'] ifTrue: [^((self height = aPrism height) and:(self base  isKindOf:  aPrism base) )]! !!MyPrism methodsFor: 'printing' stamp: 'ew 4/15/2020 23:21'!describe"printed description of object"	^self class name , ' is a prism of ', height printString, ' height and a base of  ', self area, ', ','with an volume of ', 	self volume printString,' and a surface area of ', self surfaceArea printString,' '.! !!MyPrism methodsFor: 'printing' stamp: 'ew 4/15/2020 18:44'!printOn: aStream"regular printing method"	|name|	name:=self describe.				aStream nextPutAll: name! !!MyPrism methodsFor: 'initialize-release' stamp: 'ew 4/15/2020 23:22'!initialize"initialization"	height := 0.	base := 0.! !!MyPrism methodsFor: 'initialize-release' stamp: 'ew 4/15/2020 23:22'!initializeWithHeight: aHeight  base: aBase"initialization with paremeters"(aBase isKindOf: MyShape)ifFalse: [^self error: 'not a MyShape object']ifTrue: [	height := aHeight.	base:= aBase.]	! !!MyPrism methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:20'!area"area formula for a prism"(self base isKindOf:  MyShape)ifFalse: [^self error: 'base is not a MyShape object']ifTrue:  [^(self base area) ] .! !!MyPrism methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:21'!base: aBase"setting the base which has to be a myshape object"(aBase isKindOf: MyShape)ifFalse: [^self error: 'not a MyShape object']ifTrue: [base:= aBase]! !!MyPrism methodsFor: 'calculating' stamp: 'ew 4/15/2020 20:50'!circumference (self base isMemberOf: MyShape)ifFalse: [^self error: 'base is not a MyShape object']ifTrue:  [^(self base circumference) ] .! !!MyPrism methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:21'!height: avalue"setting prism height"height:=avalue.! !!MyPrism methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:22'!surfaceArea"surface area formula for a prism"^(2*(self base area)) + ((self base circumference)*self height)! !!MyPrism methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:22'!volume"volume formula for a prism"^(self base area)*height.! !!MyPrism methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:21'!base"retreiving base object"^base.! !!MyPrism methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:21'!height"retreiving prism height"^height.! !Object subclass: #MyShape	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q2'!!MyShape methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:13'!area"abstract method, depends on shape"     self subclassResponsibility! !!MyShape methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:13'!circumference"abstract method, depends on shape"     self subclassResponsibility! !!MyShape methodsFor: 'comparing' stamp: 'ew 4/15/2020 23:13'!=aShape"equal operator"(aShape isMemberOf: MyShape)ifFalse: [^self error: 'not a compareable object']! !!MyShape methodsFor: 'printing' stamp: 'ew 4/15/2020 23:13'!describe"abstract method, depends on shape"     self subclassResponsibility! !!MyShape methodsFor: 'printing' stamp: 'ew 4/15/2020 15:48'!printOn: aStream"regular printing method"	|name|	name:=self describe.				aStream nextPutAll: name! !MyShape subclass: #MyRectangle	instanceVariableNames: 'height width'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q2'!!MyRectangle methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:15'!height"height of a rectangle"^height.! !!MyRectangle methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:16'!width"accessing width"^width! !!MyRectangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:14'!area
"area for rectangle formula"^(height*width)! !!MyRectangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:14'!circumference"circumference  of a rectangle formula"^2*(height+width)! !!MyRectangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:15'!height: aValue"setting height"(aValue>0)ifFalse: [^self error: 'Please enter a positive value'] ifTrue:  [height:= aValue] ! !!MyRectangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:16'!width: aValue"setting width"(aValue>0)ifFalse: [^self error: 'Please enter a positive value']ifTrue:  [width:= aValue] .! !!MyRectangle methodsFor: 'comparing' stamp: 'ew 4/16/2020 00:08'!=aRectangle"equals operator"(aRectangle isKindOf: MyRectangle)ifFalse: [^self error: 'not a compareable object'] ifTrue: [^((self height = aRectangle height) and:(self width = aRectangle width) )]! !!MyRectangle methodsFor: 'drawing' stamp: 'ew 4/15/2020 23:15'!draw"drawing the rectangle"Display fill: (600 @ 300 extent: self height  @ self width )        rule: Form over        fillColor: (Color blue)! !!MyRectangle methodsFor: 'printing' stamp: 'ew 4/15/2020 23:15'!describe"Printed description of a rectangle object"	^self class name , ' is a rectangle of ', self height printString, ' height and ', self width printString, ' width, ','with an area of ', 	self area printString,' and a circumference of ', self circumference printString,' '.! !!MyRectangle methodsFor: 'initialize-release' stamp: 'ew 4/15/2020 23:15'!initialize"basic initialization of object"	super initialize.	height := 0.	width := 0.! !!MyRectangle methodsFor: 'initialize-release' stamp: 'ew 4/15/2020 23:16'!initializeWithHeight:aHeight width: aWidth"initializing the object with paremeters"((aHeight> 0) and: (aWidth>0))ifFalse: [^self error: 'Please enter positive values'] ifTrue:  [(height:= aHeight).(width:= aWidth)].! !MyShape subclass: #MyTriangle	instanceVariableNames: 'aSide bSide cSide'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q2'!!MyTriangle methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:17'!aSide"access to the a side of the triangle object"^aSide! !!MyTriangle methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:18'!bSide"access to the b side of the triangle object"^bSide! !!MyTriangle methodsFor: 'accessing' stamp: 'ew 4/15/2020 23:18'!cSide"access to the c side of the triangle object"^cSide! !!MyTriangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:17'!aSide: aValue"setting the a side of the triangle object"(aValue>0)ifFalse: [^self error: 'Please enter a positive value'] ifTrue:  [aSide:= aValue] ! !!MyTriangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:17'!area"heron formula for triangle area"|numerator|numerator := ((aSide +bSide + cSide)*(aSide +bSide - cSide)*(bSide +cSide - aSide)*(cSide +aSide - bSide)) sqrt.^(numerator/4)! !!MyTriangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:18'!bSide: aValue"setting the b side of the triangle object"(aValue>0)ifFalse: [^self error: 'Please enter a positive value'] ifTrue:  [bSide:= aValue] ! !!MyTriangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:18'!cSide: aValue"setting the c side of the triangle object"(aValue>0)ifFalse: [^self error: 'Please enter a positive value'] ifTrue:  [cSide:= aValue] ! !!MyTriangle methodsFor: 'calculating' stamp: 'ew 4/15/2020 23:18'!circumference"circumference formula for a triangle"^(aSide + bSide + cSide)! !!MyTriangle methodsFor: 'comparing' stamp: 'ew 4/15/2020 23:16'!=aTriangle"equals operator"(aTriangle isMemberOf: MyTriangle )ifFalse: [^self error: 'not a compareable object'] ifTrue: [^((self aSide = aTriangle aSide) and:(self bSide = aTriangle bSide) and:(self cSide = aTriangle cSide))].! !!MyTriangle methodsFor: 'printing' stamp: 'ew 4/15/2020 23:19'!describe"printed description for triangle object"	^self class name , ' is a triangle that has: ', self aSide  printString, ' a side, ', self bSide printString, ' b side and ', self cSide printString, ' c side, with an area of ', self area printString,' and a circumference of ', self circumference printString,' '.! !!MyTriangle methodsFor: 'initialize-release' stamp: 'ew 4/15/2020 23:19'!initialize"basic initalization for triangle object"	aSide := 0.	bSide := 0.	cSide := 0.! !!MyTriangle methodsFor: 'initialize-release' stamp: 'ew 4/15/2020 23:19'!initializeWithaSide: newASide bSide: newBSide cSide: newCSide"initialization with paremeters, including triangle inequality check"((newASide> 0) and: (newBSide>0) and: (newCSide>0))ifFalse: [^self error: 'Please enter positive values'] ifTrue:  [	(((newASide + newBSide) >= newCSide) and: ((newASide + newCSide) >= newBSide) and: ((newBSide + newCSide) >= newASide))	ifFalse: [^self error: 'all sides must follow  the rule of Triangle inequality']	 ifTrue:  [		(aSide := newASide).		(bSide := newBSide). 		(cSide := newCSide). ]]! !
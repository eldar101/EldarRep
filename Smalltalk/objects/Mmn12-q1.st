Object subclass: #MySequence	instanceVariableNames: 'start step count'	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1'!!MySequence methodsFor: 'printing' stamp: 'ew 4/14/2020 19:55'!describe"for printing the list"	|name|	name := ('sequence: '), self class printString.	1 to:count do:[:i| name:=(name , ' ', (self valueOf:i) printString)].	^name! !!MySequence methodsFor: 'printing' stamp: 'ew 4/14/2020 19:55'!printOn: aStream"regular printing method"	|name|	name:=self describe.				aStream nextPutAll: name! !!MySequence methodsFor: 'values' stamp: 'ew 4/14/2020 19:54'!count"Returns the value of count"^count! !!MySequence methodsFor: 'values' stamp: 'ew 4/14/2020 19:54'!start"Returns the value of start"^start! !!MySequence methodsFor: 'values' stamp: 'ew 4/14/2020 19:55'!step"Returns the value of step"^step! !!MySequence methodsFor: 'values' stamp: 'ew 4/15/2020 23:12'!sumOf: n"sum of all elements up to n"((n isInteger) and:[(n>=0 and: n<=count)])	ifFalse: [^ self error: 'This is out of the sequence range'].^(1 to: n) inject: 0 into: [:sum :element | sum + (self valueOf: element)]! !!MySequence methodsFor: 'values' stamp: 'ew 4/14/2020 19:55'!valueOf: n"abstract method for different sequences value return" self subclassResponsibility! !!MySequence methodsFor: 'initialize-release' stamp: 'ew 4/14/2020 13:16'!initialize	"initalizing the sequence"	super initialize.	start:=0.	step:=0.	count:=0.! !!MySequence methodsFor: 'initialize-release' stamp: 'ew 4/14/2020 13:21'!initializeWithStart: aStart step:aStep count: aCount	"initalizing the sequence with parameters'"	start:=aStart.	step:=aStep.	count:=aCount.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySequence class	instanceVariableNames: ''!!MySequence class methodsFor: 'instance creation' stamp: 'ew 4/14/2020 14:01'!new	self == MySequence ifTrue: [		^ self error: 'MySequence is an abstract class. Please create a regular subclass.'].	^ super new! !MySequence subclass: #My3SumSequence	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1'!!My3SumSequence methodsFor: 'initialize-release' stamp: 'ew 4/14/2020 17:10'!initializeWithStart: aStart count: aCount	"initalizing the sequence with parameters', no step here!!"	start:=aStart.	count:=aCount.! !!My3SumSequence methodsFor: 'values' stamp: 'ew 4/14/2020 20:46'!valueOf: n"Returns the value of any element in a 3sum sequence"((n isInteger) and:[(n>0 and: n<=count)])		ifFalse:[^ self error: 'This is out of the sequence range'].		(n<4)		ifTrue: [^start]		ifFalse: [^(self valueOf: n-1) + (self valueOf: n-2) + (self valueOf: n-3)]! !MySequence subclass: #MyArithmeticSequence	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1'!!MyArithmeticSequence methodsFor: 'values' stamp: 'ew 4/14/2020 19:56'!valueOf: n"Returns the value of any element in an arithmetic sequence"((n isInteger) and:[(n>0 and: n<=count)])		ifFalse:[^ self error: 'This is out of the sequence range'].		^(n-1)*step+start! !MySequence subclass: #MyGeometricSequence	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mmn12-q1'!!MyGeometricSequence methodsFor: 'values' stamp: 'ew 4/14/2020 20:45'!valueOf: n"Returns the value of any element in a geometric sequence"((n isInteger) and:[(n>0 and: n<=count)])		ifFalse:[^ self error: 'This is out of the sequence range'].		^start*[step raisedTo: n-1] value! !